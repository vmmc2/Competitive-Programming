#include <bits/stdc++.h>
#include <sstream>
#include <cmath>
#define pb push_back
#define INF 99999999

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

vector<int> adjlist[100000];
int visitados[100000];
int dist[100000];

void reset(){
    for(int i = 0; i < 100000; i++){
        adjlist[i].clear();
        visitados[i] = 0;
        dist[i] = INF;
    }
    return;
}

pair<int,int> bfs(int source){ // pair[0] = qtd ---- pair[1] = dia.
    dist[source] = 0;
    queue<int> fila;
    visitados[source] = 1;
    fila.push(source);
    pair<int,int> ss;
    ss.first = -2;
    ss.second = -2;
    map<int,int> dict; //chave = layer/dia...  -- elemento = qtd de caras naquela layer
    while(!fila.empty()){
        int x = fila.front();
        fila.pop();
        for(int i = 0; i < (int)adjlist[x].size(); i++){
            int u = adjlist[x][i];
            if(visitados[u] == 0){
                visitados[u] = 1;
                fila.push(u);
                dist[u] = min(dist[x] + 1, dist[u]);
                dict[dist[u]]++;
            }
        }
    }
    for(map<int,int>::iterator it = dict.begin(); it != dict.end(); it++){
        cout << it->first << " " << it->second << "\n";
    }
    return ss;
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    
    int numvertex, neigh;
    cin >> numvertex;
    for(int i = 0; i < numvertex; i++){
        cin >> neigh;
        for(int j = 0; j < neigh; j++){
            int a;
            cin >> a;
            adjlist[i].push_back(a);
        }
    }
    int numcasos;
    cin >> numcasos;
    for(int a = 1; a <= numcasos; a++){
        reset();
        int source;
        cin >> source;
        pair<int,int> xesque = bfs(source);
        /*if(xesque.first == -2 && xesque.second == - 2){
            cout << "0" << "\n";
        }else{
            cout << xesque.first << " " << xesque.second << "\n";
        }*/
    }
    return 0;
}
