#include <bits/stdc++.h>
#include <cmath>
#define INF 100000
#define pb push_back

using namespace std;

int adjmatrixy[40][40];
int adjmatrixv[40][40];
char auxmat[40][40]; //serve para me dizer se a aresta eh para jovens ou para idosos

int main(){
    int numedges;
    char age; //age == Y (for young people) and age == M (for old people: age > 30)
    char side;//side == U (unidirectional) and side == B (bidirectional)
    char x, y; //vertices ligados por uma aresta
    int peso;
    char me, miguel;
    int aux;
    while(scanf("%d", &numedges) == 1 && numedges != 0){
        aux = 1;
        vector<char> answer;
        for(int i = 0; i < 40; i++){
            for(int j = 0; j < 40; j++){
                if(i == j){
                    adjmatrixv[i][i] = 0;
                    adjmatrixy[i][i] = 0;
                    auxmat[i][i] = '*';
                }else{
                    adjmatrixv[i][j] = 1000000;
                    adjmatrixy[i][j] = 1000000;
                    auxmat[i][j] = '*';
                }
            }
        }
        map<char,int> dicio;
        map<int,char> dicio2;
        int minimo = 1000000;
        for(int i = 1; i <= numedges; i++){
            cin >> age >> side >> x >> y >> peso;
            //primeiro, temos que fazer a conversao de letras para inteiros
            if(dicio.find(x) == dicio.end()){
                //printf("entrei: %c nao tava no dictionary\n", x);
                dicio[x] = aux;
                dicio2[aux] = x;
                aux++;
            }
            if(dicio.find(y) == dicio.end()){
                //printf("entrei2: %c nao tava no dictionary\n", y);
                dicio[y] = aux;
                dicio2[aux] = y;
                aux++;
            }
            //agora vamos setar o peso das arestas no role
            if(age == 'Y'){
                if(side == 'U'){
                    adjmatrixy[dicio[x]][dicio[y]] = peso;
                    auxmat[dicio[x]][dicio[y]] = age;
                }
                if(side == 'B'){
                    adjmatrixy[dicio[x]][dicio[y]] = peso;
                    adjmatrixy[dicio[y]][dicio[x]] = peso;
                    auxmat[dicio[x]][dicio[y]] = age;
                    auxmat[dicio[y]][dicio[x]] = age;
                }
            }
            if(age == 'M'){
                if(side == 'U'){
                    adjmatrixv[dicio[x]][dicio[y]] = peso;
                    auxmat[dicio[x]][dicio[y]] = age;
                }
                if(side == 'B'){
                    adjmatrixv[dicio[x]][dicio[y]] = peso;
                    adjmatrixv[dicio[y]][dicio[x]] = peso;
                    auxmat[dicio[x]][dicio[y]] = age;
                    auxmat[dicio[y]][dicio[x]] = age;
                }
            }
        }
        scanf("%c %c", &me, &miguel);
        aux--;
        //hora de rodar o floyd_warshall... para o rapaz mais novo....
        for(int k = 1; k <= aux; k++){
            for(int i = 1; i <= aux; i++){
                for(int j = 1; j <= aux; j++){
                    if(auxmat[i][j] == 'Y' && auxmat[i][k] == 'Y' && auxmat[k][j] == 'Y'){
                        adjmatrixy[i][j] = min(adjmatrixy[i][j], adjmatrixy[i][k] + adjmatrixy[k][j]);
                    }
                }
            }
        }
        printf("matriz do cara novo:\n");
        for(int i = 1; i <= aux; i++){
            for(int j = 1; j <= aux; j++){
                printf("%d ", adjmatrixy[i][j]);
            }
            printf("\n");
        }
        printf("\n");
        //hora de rodar o fw para o velho
        for(int k = 1; k <= aux; k++){
            for(int i = 1; i <= aux; i++){
                for(int j = 1; j <= aux; j++){
                    if(auxmat[i][j] == 'M' && auxmat[i][k] == 'M' && auxmat[k][j] == 'M'){
                        adjmatrixv[i][j] = min(adjmatrixv[i][j], adjmatrixv[i][k] + adjmatrixv[k][j]);
                    }
                }
            }
        }
        printf("matriz do cara velho:\n");
        for(int i = 1; i <= aux; i++){
            for(int j = 1; j <= aux; j++){
                printf("%d ", adjmatrixv[i][j]);
            }
            printf("\n");
        }
        printf("\n");
        for(int i = 1; i <= aux; i++){
            if(adjmatrixy[dicio[me]][i] + adjmatrixv[dicio[miguel]][i] < minimo){
                minimo = adjmatrixy[dicio[me]][i] + adjmatrixv[dicio[miguel]][i];
                answer.pb(dicio2[i]);
            }else if(adjmatrixy[dicio[me]][i] + adjmatrixv[dicio[miguel]][i] < 0xffffff && adjmatrixy[dicio[me]][i] + adjmatrixv[dicio[miguel]][i] == minimo){
                answer.pb(dicio2[i]);
            }
        }
        sort(answer.begin(), answer.end());
        if(minimo == 1000000){
            printf("You will never meet.\n");
            continue;
        }
        if((int)answer.size() == 1){
            if(minimo == 0xffffff){
                printf("You will never meet.\n");
            }else{
                printf("%d %c\n", minimo, answer[0]);
            }
        }else{
            printf("%d ", minimo);
            for(int i = 0; i < (int)answer.size(); i++){
                printf("%c ", answer[i]);
            }
            printf("\n");
        }
    }
    return 0;
}
